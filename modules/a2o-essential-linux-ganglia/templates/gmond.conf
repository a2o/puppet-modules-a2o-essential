###########################################################################
# a2o Essential Puppet Modules                                            #
#-------------------------------------------------------------------------#
# Copyright (c) 2012 Bostjan Skufca                                       #
#-------------------------------------------------------------------------#
# This source file is subject to version 2.0 of the Apache License,       #
# that is bundled with this package in the file LICENSE, and is           #
# available through the world-wide-web at the following url:              #
# http://www.apache.org/licenses/LICENSE-2.0                              #
#-------------------------------------------------------------------------#
# Authors: Bostjan Skufca <my_name [at] a2o {dot} si>                     #
###########################################################################
#
# WARNING: This file is generated and controlled by configuration management.
# WARNING: All changes will be overwritten.
# WARNING: Please use -site and -local config files or conf.d directory instead.
#



### Global daemon options
globals {
  daemonize              = yes
  setuid                 = yes
  user                   = ganglia
  debug_level            = 0
  mute                   = no
  deaf                   = no
  allow_extra_data       = yes
  host_dmax              = 900
  cleanup_threshold      = 300
  gexec                  = no
  send_metadata_interval = 60
}



### Cluster and host definition
cluster {
  name    = "<%= ganglia_cluster_name %>"
  owner   = "<%= root_email %>"
  latlong = "unspecified"
  url     = "unspecified"
}
host {
  location = "unspecified"
}



### Connection and access control
tcp_accept_channel {
    port = 8649
    acl {
	default = "deny"
	access {
	    ip     = 127.0.0.1
	    mask   = 32
	    action = "allow"
	}


	<% ganglia_headnode_ips.each do |headnode_ip| -%>
	    access {
	        ip     = <%= headnode_ip %>
	        mask   = 32
	        action = "allow"
	    }
	<% end %>


	<% net_management_sources.each do |source| -%>
	    <% if source =~ /^[^\/]+$/ -%>

	        access {
		    ip     = <%= source %>
		    mask   = 32
		    action = allow
		}

	    <% else -%>
		<% ip, mask = source.match(/^([^\/]*)\/(.+)$/).captures -%>

		access {
		    ip     = <%= ip %>
		    mask   = <%= mask %>
		    action = allow
		}

	    <% end -%>
	<% end %>
    }
}



<% if has_variable?("ganglia_headnode") -%>
    ### Headnode config
    udp_recv_channel {
	port = 8649
    }
<% end %>



### Compute node config
<% ganglia_headnode_ips.each do |headnode_ip| -%>
    udp_send_channel {
	host = <%= headnode_ip %>
	port = 8649
    }
<% end %>



### Module definitions
modules {
  module {
    name = "core_metrics"
  }
  module {
    name = "cpu_module"
    path = "modcpu.so"
  }
  module {
    name = "disk_module"
    path = "moddisk.so"
  }
  module {
    name = "load_module"
    path = "modload.so"
  }
  module {
    name = "mem_module"
    path = "modmem.so"
  }
  module {
    name = "net_module"
    path = "modnet.so"
  }
  module {
    name = "proc_module"
    path = "modproc.so"
  }
  module {
    name = "sys_module"
    path = "modsys.so"
  }
}
include ('/etc/ganglia/conf.d/*.conf')



### Collection groups
collection_group {
  collect_every  = 10
  time_threshold = 60
  metric {
    name = "heartbeat"
  }
}



### Collection group: host info
collection_group {
  collect_every  = 30
  time_threshold = 180
  metric {
    name  = "cpu_num"
    title = "CPU Count"
  }
  metric {
    name  = "cpu_speed"
    title = "CPU Speed"
  }
  metric {
    name  = "boottime"
    title = "Last Boot Time"
  }
  metric {
    name = "machine_type"
    title = "Machine Type"
  }
  metric {
    name  = "os_name"
    title = "Operating System"
  }
  metric {
    name  = "os_release"
    title = "Operating System Release"
  }
  metric {
    name  = "location"
    title = "Location"
  }
}



### Collection group: CPU status
collection_group {
  collect_every  = 10
  time_threshold = 60
  metric {
    name            = "cpu_user"
    title           = "CPU User"
    value_threshold = 0.1
  }
  metric {
    name            = "cpu_system"
    title           = "CPU System"
    value_threshold = 0.1
  }
  metric {
    name            = "cpu_idle"
    title           = "CPU Idle"
    value_threshold = 0.1
  }
  metric {
    name            = "cpu_nice"
    title           = "CPU Nice"
    value_threshold = 0.1
  }
  metric {
    name            = "cpu_aidle"
    title           = "CPU aidle"
    value_threshold = 0.1
  }
  metric {
    name            = "cpu_wio"
    title           = "CPU wio"
    value_threshold = 0.1
  }
  metric {
    name            = "cpu_intr"
    title           = "CPU intr"
    value_threshold = 0.1
  }
  metric {
    name            = "cpu_sintr"
    title           = "CPU sintr"
    value_threshold = 0.1
  }
}



### Collection group: Load averages
collection_group {
  collect_every  = 10
  time_threshold = 60
  metric {
    name            = "load_one"
    title           = "One Minute Load Average"
    value_threshold = 0.1
  }
  metric {
    name            = "load_five"
    title           = "Five Minute Load Average"
    value_threshold = 0.1
  }
  metric {
    name            = "load_fifteen"
    title           = "Fifteen Minute Load Average"
    value_threshold = 0.1
  }
}



### Collection group: number of (running) processes
collection_group {
  collect_every  = 10
  time_threshold = 60
  metric {
    name            = "proc_run"
    title           = "Total Running Processes"
    value_threshold = 0.1
  }
  metric {
    name            = "proc_total"
    title           = "Total Processes"
    value_threshold = 0.1
  }
}



### Collection group: memory statistics
collection_group {
  collect_every  = 10
  time_threshold = 60
  metric {
    name            = "mem_total"
    title           = "Memory Total"
    value_threshold = 256.0
  }
  metric {
    name            = "mem_free"
    title           = "Free Memory"
    value_threshold = 256.0
  }
  metric {
    name            = "mem_shared"
    title           = "Shared Memory"
    value_threshold = 256.0
  }
  metric {
    name            = "mem_buffers"
    title           = "Memory Buffers"
    value_threshold = 256.0
  }
  metric {
    name            = "mem_cached"
    title           = "Cached Memory"
    value_threshold = 256.0
  }
  metric {
    name            = "swap_total"
    title           = "Swap Space Total"
    value_threshold = 256.0
  }
  metric {
    name            = "swap_free"
    title           = "Free Swap Space"
  }
}



### Collection group: network traffic
collection_group {
  collect_every  = 10
  time_threshold = 60
  metric {
    name            = "bytes_out"
    title           = "Bytes Sent"
    value_threshold = 4096
  }
  metric {
    name            = "bytes_in"
    title           = "Bytes Received"
    value_threshold = 4096
  }
  metric {
    name            = "pkts_out"
    title           = "Packets Sent"
    value_threshold = 256
  }
  metric {
    name            = "pkts_in"
    title           = "Packets Received"
    value_threshold = 256
  }
}



### Collection group: disk space
collection_group {
  collect_every  = 30
  time_threshold = 180
  metric {
    name            = "disk_total"
    title           = "Total Disk Space"
    value_threshold = 0.1
  }
  metric {
    name            = "disk_free"
    title           = "Disk Space Available"
    value_threshold = 0.1
  }
  metric {
    name            = "part_max_used"
    title           = "Maximum Disk Space Used"
    value_threshold = 0.1
  }
}
